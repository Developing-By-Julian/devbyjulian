<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WEER</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>
        button,
        input[type="submit"],
        input[type="reset"] {
            background: none;
            color: inherit;
            border: none;
            padding: 0;
            font: inherit;
            cursor: pointer;
            outline: inherit;
        }


        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }

        .weather-container {
            border: 1px solid #ddd;
            padding: 20px;
            border-radius: 5px;
            max-width: 600px;
            margin: 0 auto;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .weather-header {
            text-align: center;
        }

        .weather-item {
            margin: 10px 0;
        }
    </style>
</head>

<body>
    <button onclick="getLocation()"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
            class="bi bi-geo-alt-fill" viewBox="0 0 16 16">
            <path d="M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10m0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6"></path>
        </svg></button>
    <p id="location"></p>
    <div class="weather-container">
        <div class="weather-header">
            <h1>Weer info voor <span id="weather-date"></span></h1>
            <p>Geen data? Klik links boven op het locatie icoontje</p>
            <a class="btn btn-primary" href="/" role="button">Portfolio</a>

        </div>
        <div class="weather-item"><strong>Temperatuur:</strong> <span id="temp"></span>°C</div>
        <div class="weather-item"><strong>Gevoelstemperatuur:</strong> <span id="feelslike"></span>°C</div>
        <div class="weather-item"><strong>Luchtvochtigheid:</strong> <span id="humidity"></span>%</div>
        <div class="weather-item"><strong>Neerslag:</strong> <span id="precip"></span> mm</div>
        <div class="weather-item"><strong>Windsnelheid:</strong> <span id="windspeed"></span> km/h</div>
        <div class="weather-item"><strong>Windrichting:</strong> <span id="winddir"></span>°</div>
        <div class="weather-item"><strong>Luchtdruk:</strong> <span id="pressure"></span> hPa</div>
        <div class="weather-item"><strong>Weersomstandigheden:</strong> <span id="conditions"></span></div>

    </div>
    <script>
        function getLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(showPosition, showError);
            } else {
                document.getElementById("location").innerHTML = "Geolocation is not supported by this browser.";
            }
        }

        async function showPosition(position) {
            var latitude = position.coords.latitude;
            var longitude = position.coords.longitude;
            var url

            await fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${latitude}%2C${longitude}%20?unitGroup=metric&include=current&key=B5ZT7CX89V7Q2FG285BA96JW5&contentType=json`, {
                "method": "GET",
                "headers": {}
            })
                .then(async response => {
                    const json = await response.json()
                    console.log(response);
                    url = response.url
                    console.log(json);
                    return json
                }).then(data => {
                    const weatherDate = data.days[0];
                    document.title = `WEER | ${weatherDate.datetime} `
                    document.getElementById('weather-date').innerText = weatherDate.datetime
                    document.getElementById('temp').innerText = weatherDate.temp;
                    document.getElementById('feelslike').innerText = weatherDate.feelslike;
                    document.getElementById('humidity').innerText = weatherDate.humidity;
                    document.getElementById('precip').innerText = weatherDate.precip;
                    document.getElementById('windspeed').innerText = weatherDate.windspeed;
                    document.getElementById('winddir').innerText = weatherDate.winddir;
                    document.getElementById('pressure').innerText = weatherDate.pressure;
                    document.getElementById('conditions').innerText = weatherDate.conditions;
                })
                .catch(err => {
                    console.error(err);
                });


        }

        function showError(error) {
            switch (error.code) {
                case error.PERMISSION_DENIED:
                    document.getElementById("location").innerHTML = "User denied the request for Geolocation.";
                    break;
                case error.POSITION_UNAVAILABLE:
                    document.getElementById("location").innerHTML = "Location information is unavailable.";
                    break;
                case error.TIMEOUT:
                    document.getElementById("location").innerHTML = "The request to get user location timed out.";
                    break;
                case error.UNKNOWN_ERROR:
                    document.getElementById("location").innerHTML = "An unknown error occurred.";
                    break;
            }
        }


    </script>
</body>

</html>